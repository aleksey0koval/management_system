//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//        auth.jdbcAuthentication()
//                .dataSource(dataSource)
//                .passwordEncoder(NoOpPasswordEncoder.getInstance())
//                .usersByUsernameQuery("select username, password, enabled from user_accounts where username=?")
//                .authoritiesByUsernameQuery(
//                        "SELECT t1.username, t2.role_name FROM user_accounts t1 " +
//                                "INNER JOIN " +
//                                "(select r.name as role_name, ur.user_id as user_id from roles r INNER JOIN user_roles ur ON r.id = ur.role_id) t2\n" +
//                                "ON t2.user_id = t1.id where t1.username=?");
////        "select u.username, (select r.name from roles r where r.id = ur.role_id) " +
////                "from user_accounts u inner join user_roles ur on " +
////                "u.id = ur.user_id where u.username=?");
//    }
//
//
//    @Query("SELECT t1.username, t1.password, t1.date, t1.first_name, t1.last_name, t1.enabled, t2.role_name " +
//            "FROM user_accounts t1 " +
//            "INNER JOIN (SELECT r.name as role_name, ur.user_id as user_id FROM roles r " +
//            "INNER JOIN user_roles ur ON r.id = ur.role_id) t2 ON t2.user_id = t1.id")
//    List<UserRoleDto> getAllDto();